{
  "categories": [
    "unit-tests",
    "integration-tests",
    "e2e-tests",
    "common-patterns"
  ],
  "totalExamples": 17,
  "examplesByCategory": {
    "unit-tests": [
      {
        "fileName": "useThemeCounter.test.tsx",
        "dirName": "advanced-patterns",
        "description": "This test file demonstrates how to test advanced patterns that combine custom hooks with context in Vitest with TypeScript. KEY CONCEPTS: 1. Testing hooks that depend on context 2. Using wrapper components to provide context in tests 3. Testing type discriminated behavior 4. Testing with branded types",
        "isTestFile": true,
        "path": "advanced-patterns/useThemeCounter.test.tsx"
      },
      {
        "fileName": "direct-imports.test.ts",
        "dirName": "direct-imports",
        "description": "Learn how to mock direct module imports in TypeScript tests. This example demonstrates how to mock API calls, handle async responses, and verify function calls with type safety.",
        "isTestFile": true,
        "path": "direct-imports/direct-imports.test.ts"
      },
      {
        "fileName": "indirect-dependencies.test.ts",
        "dirName": "indirect-dependencies",
        "description": "Master testing components with indirect dependencies. This example shows techniques for mocking nested dependencies, database connections, and handling complex dependency chains.",
        "isTestFile": true,
        "path": "indirect-dependencies/indirect-dependencies.test.ts"
      },
      {
        "fileName": "context.test.tsx",
        "dirName": "context",
        "description": "This test file demonstrates how to test React components that use Context with Vitest and Testing Library, focusing on mocking context providers.",
        "isTestFile": true,
        "path": "react-specific/context/context.test.tsx"
      },
      {
        "fileName": "useCounter.test.ts",
        "dirName": "hooks",
        "description": "This test file demonstrates how to test custom React hooks in Vitest with TypeScript, focusing on testing hook behavior and state changes.",
        "isTestFile": true,
        "path": "react-specific/hooks/useCounter.test.ts"
      },
      {
        "fileName": "useEffect.test.tsx",
        "dirName": "hooks",
        "description": "This test file demonstrates how to test components with useEffect in Vitest with TypeScript, focusing on mocking dependencies and testing side effects.",
        "isTestFile": true,
        "path": "react-specific/hooks/useEffect.test.tsx"
      },
      {
        "fileName": "router.test.tsx",
        "dirName": "router",
        "description": "This test file demonstrates how to test React components that use react-router with Vitest and Testing Library, focusing on mocking router functionality.",
        "isTestFile": true,
        "path": "react-specific/router/router.test.tsx"
      },
      {
        "fileName": "suspense.test.tsx",
        "dirName": "suspense",
        "description": "This test file demonstrates how to test React components that use Suspense and ErrorBoundary with Vitest and Testing Library, focusing on mocking async data fetching.",
        "isTestFile": true,
        "path": "react-specific/suspense/suspense.test.tsx"
      },
      {
        "fileName": "same-package.test.ts",
        "dirName": "same-package",
        "description": "Explore effective strategies for mocking modules from the same package. Learn how to use Jest's module factory pattern and maintain type safety when mocking internal utilities.",
        "isTestFile": true,
        "path": "same-package/same-package.test.ts"
      },
      {
        "fileName": "test-doubles.test.ts",
        "dirName": "test-doubles",
        "description": "Comprehensive guide to test doubles (mocks, stubs, spies) in TypeScript. Learn when to use each type of test double and how to implement them with proper type definitions.",
        "isTestFile": true,
        "path": "test-doubles/test-doubles.test.ts"
      }
    ],
    "integration-tests": [
      {
        "fileName": "dynamic-imports.test.ts",
        "dirName": "dynamic-imports",
        "description": "Learn advanced techniques for testing code with dynamic imports. This example demonstrates how to mock dynamically imported modules and test code that uses import() syntax.",
        "isTestFile": true,
        "path": "dynamic-imports/dynamic-imports.test.ts"
      },
      {
        "fileName": "lazy-loaded-components.test.tsx",
        "dirName": "lazy-loaded-components",
        "description": "This test file demonstrates how to mock lazy-loaded React components in Vitest with TypeScript, focusing on avoiding hoisting-related errors.",
        "isTestFile": true,
        "path": "lazy-loaded-components/lazy-loaded-components.test.tsx"
      }
    ],
    "e2e-tests": [
      {
        "fileName": "accessibility-testing.test.tsx",
        "dirName": "accessibility-testing",
        "description": "Comprehensive guide to accessibility testing in React applications. Learn how to use jest-axe to verify WCAG compliance and test keyboard navigation and screen reader compatibility.",
        "isTestFile": true,
        "path": "accessibility-testing/accessibility-testing.test.tsx"
      },
      {
        "fileName": "async-testing.test.ts",
        "dirName": "async-testing",
        "description": "Deep dive into testing asynchronous code patterns. Learn strategies for testing promises, async/await, API clients, error handling, and race conditions.",
        "isTestFile": true,
        "path": "async-testing/async-testing.test.ts"
      },
      {
        "fileName": "enhanced-async-testing.test.ts",
        "dirName": "async-testing",
        "description": "Advanced async testing techniques including branded types, discriminated unions, and complex timing scenarios. Learn how to test request cancellation, error states, and edge cases.",
        "isTestFile": true,
        "path": "async-testing/enhanced-async-testing.test.ts"
      },
      {
        "fileName": "nodejs-testing.test.ts",
        "dirName": "nodejs-testing",
        "description": "Complete guide to testing Node.js applications. Learn techniques for mocking the file system, command-line interfaces, user input, and other Node.js-specific functionality.",
        "isTestFile": true,
        "path": "nodejs-testing/nodejs-testing.test.ts"
      }
    ],
    "common-patterns": [
      {
        "title": "Type Safety with MockedFunction",
        "description": "Using TypeScript to ensure type safety in mocks",
        "examples": [
          {
            "fileName": "direct-imports.test.ts",
            "dirName": "direct-imports",
            "path": "direct-imports/direct-imports.test.ts"
          },
          {
            "fileName": "nodejs-testing.test.ts",
            "dirName": "nodejs-testing",
            "path": "nodejs-testing/nodejs-testing.test.ts"
          },
          {
            "fileName": "same-package.test.ts",
            "dirName": "same-package",
            "path": "same-package/same-package.test.ts"
          }
        ]
      },
      {
        "title": "Spy Assertions",
        "description": "Verifying function calls with spy assertions",
        "examples": [
          {
            "fileName": "accessibility-testing.test.tsx",
            "dirName": "accessibility-testing",
            "path": "accessibility-testing/accessibility-testing.test.tsx"
          },
          {
            "fileName": "useThemeCounter.test.tsx",
            "dirName": "advanced-patterns",
            "path": "advanced-patterns/useThemeCounter.test.tsx"
          },
          {
            "fileName": "async-testing.test.ts",
            "dirName": "async-testing",
            "path": "async-testing/async-testing.test.ts"
          },
          {
            "fileName": "direct-imports.test.ts",
            "dirName": "direct-imports",
            "path": "direct-imports/direct-imports.test.ts"
          },
          {
            "fileName": "dynamic-imports.test.ts",
            "dirName": "dynamic-imports",
            "path": "dynamic-imports/dynamic-imports.test.ts"
          },
          {
            "fileName": "indirect-dependencies.test.ts",
            "dirName": "indirect-dependencies",
            "path": "indirect-dependencies/indirect-dependencies.test.ts"
          },
          {
            "fileName": "lazy-loaded-components.test.tsx",
            "dirName": "lazy-loaded-components",
            "path": "lazy-loaded-components/lazy-loaded-components.test.tsx"
          },
          {
            "fileName": "nodejs-testing.test.ts",
            "dirName": "nodejs-testing",
            "path": "nodejs-testing/nodejs-testing.test.ts"
          },
          {
            "fileName": "context.test.tsx",
            "dirName": "context",
            "path": "react-specific/context/context.test.tsx"
          },
          {
            "fileName": "useEffect.test.tsx",
            "dirName": "hooks",
            "path": "react-specific/hooks/useEffect.test.tsx"
          },
          {
            "fileName": "suspense.test.tsx",
            "dirName": "suspense",
            "path": "react-specific/suspense/suspense.test.tsx"
          },
          {
            "fileName": "same-package.test.ts",
            "dirName": "same-package",
            "path": "same-package/same-package.test.ts"
          },
          {
            "fileName": "test-doubles.test.ts",
            "dirName": "test-doubles",
            "path": "test-doubles/test-doubles.test.ts"
          },
          {
            "fileName": "common-issues.test.ts",
            "dirName": "troubleshooting",
            "path": "troubleshooting/common-issues.test.ts"
          }
        ]
      },
      {
        "title": "Mock Implementation",
        "description": "Providing custom implementations for mocked functions",
        "examples": [
          {
            "fileName": "useThemeCounter.test.tsx",
            "dirName": "advanced-patterns",
            "path": "advanced-patterns/useThemeCounter.test.tsx"
          },
          {
            "fileName": "async-testing.test.ts",
            "dirName": "async-testing",
            "path": "async-testing/async-testing.test.ts"
          },
          {
            "fileName": "enhanced-async-testing.test.ts",
            "dirName": "async-testing",
            "path": "async-testing/enhanced-async-testing.test.ts"
          },
          {
            "fileName": "dynamic-imports.test.ts",
            "dirName": "dynamic-imports",
            "path": "dynamic-imports/dynamic-imports.test.ts"
          },
          {
            "fileName": "indirect-dependencies.test.ts",
            "dirName": "indirect-dependencies",
            "path": "indirect-dependencies/indirect-dependencies.test.ts"
          },
          {
            "fileName": "nodejs-testing.test.ts",
            "dirName": "nodejs-testing",
            "path": "nodejs-testing/nodejs-testing.test.ts"
          },
          {
            "fileName": "context.test.tsx",
            "dirName": "context",
            "path": "react-specific/context/context.test.tsx"
          },
          {
            "fileName": "useEffect.test.tsx",
            "dirName": "hooks",
            "path": "react-specific/hooks/useEffect.test.tsx"
          },
          {
            "fileName": "suspense.test.tsx",
            "dirName": "suspense",
            "path": "react-specific/suspense/suspense.test.tsx"
          },
          {
            "fileName": "same-package.test.ts",
            "dirName": "same-package",
            "path": "same-package/same-package.test.ts"
          },
          {
            "fileName": "common-issues.test.ts",
            "dirName": "troubleshooting",
            "path": "troubleshooting/common-issues.test.ts"
          }
        ]
      }
    ]
  }
}